diff -Nuar a/hardware/libhardware_legacy/wifi/wifi.c b/hardware/libhardware_legacy/wifi/wifi.c
index 4827357..631fc02 100644
--- a/hardware/libhardware_legacy/wifi/wifi.c
+++ b/hardware/libhardware_legacy/wifi/wifi.c
@@ -25,6 +25,7 @@
 #include <poll.h>
 
 #include "hardware_legacy/wifi.h"
+//#include "hardware_legacy/wifi_fst.h"
 #ifdef LIBWPA_CLIENT_EXISTS
 #include "libwpa_client/wpa_ctrl.h"
 #endif
@@ -97,12 +98,12 @@ static char primary_iface[PROPERTY_VALUE_MAX];
 #endif
 
 #define WIFI_DRIVER_LOADER_DELAY	1000000
-#define SYSFS_PATH_MAX			256
 
 static const char IFACE_DIR[]           = "/data/system/wpa_supplicant";
 #ifdef WIFI_DRIVER_MODULE_PATH
-static const char DRIVER_NAME_PROP[]    = "wlan.modname";
-static const char DRIVER_PATH_PROP[]    = "wlan.modpath";
+static const char DRIVER_MODULE_NAME[]  = WIFI_DRIVER_MODULE_NAME;
+static const char DRIVER_MODULE_TAG[]   = WIFI_DRIVER_MODULE_NAME " ";
+static const char DRIVER_MODULE_PATH[]  = WIFI_DRIVER_MODULE_PATH;
 static const char DRIVER_MODULE_ARG[]   = WIFI_DRIVER_MODULE_ARG;
 #endif
 static const char FIRMWARE_LOADER[]     = WIFI_FIRMWARE_LOADER;
@@ -116,9 +117,6 @@ static const char SUPP_CONFIG_FILE[]    = "/data/misc/wifi/wpa_supplicant.conf";
 static const char P2P_CONFIG_FILE[]     = "/data/misc/wifi/p2p_supplicant.conf";
 static const char CONTROL_IFACE_PATH[]  = "/data/misc/wifi/sockets";
 static const char MODULE_FILE[]         = "/proc/modules";
-static const char SYSFS_CLASS_NET[]     = "/sys/class/net";
-static const char MODULE_DEFAULT_DIR[]  = "/system/lib/modules";
-static const char SYS_MOD_NAME_DIR[]    = "device/driver/module";
 
 static const char IFNAME[]              = "IFNAME=";
 #define IFNAMELEN			(sizeof(IFNAME) - 1)
@@ -135,7 +133,7 @@ static char supplicant_name[PROPERTY_VALUE_MAX];
 /* Is either SUPP_PROP_NAME or P2P_PROP_NAME */
 static char supplicant_prop_name[PROPERTY_KEY_MAX];
 
-static int insmod(const char *filename, const char *args)
+int insmod(const char *filename, const char *args)
 {
     void *module;
     unsigned int size;
@@ -152,7 +150,7 @@ static int insmod(const char *filename, const char *args)
     return ret;
 }
 
-static int rmmod(const char *modname)
+int rmmod(const char *modname)
 {
     int ret = -1;
     int maxtry = 10;
@@ -217,93 +215,18 @@ int wifi_change_driver_state(const char *state)
 }
 #endif
 
-#ifdef WIFI_DRIVER_MODULE_PATH
-static int get_driver_path(const char *mod, const char *path, char *buf) {
-    DIR *dir;
-    struct dirent *de;
-    char modpath[SYSFS_PATH_MAX];
-    int ret = 0;
-
-    if ((dir = opendir(path))) {
-        while ((de = readdir(dir))) {
-            struct stat sb;
-            if (de->d_name[0] == '.')
-                continue;
-            snprintf(modpath, SYSFS_PATH_MAX, "%s/%s", path, de->d_name);
-            if (!strcmp(de->d_name, mod)) {
-                strncpy(buf, modpath, SYSFS_PATH_MAX - 1);
-                buf[SYSFS_PATH_MAX - 1] = '\0';
-                ret = 1;
-                break;
-            }
-            if (!stat(modpath, &sb) && (sb.st_mode & S_IFMT) == S_IFDIR)
-                if ((ret = get_driver_path(mod, modpath, buf)))
-                    break;
-        }
-        closedir(dir);
-    }
-    return ret;
-}
-
-static int get_driver_info(char *buf) {
-    DIR *netdir;
-    struct dirent *de;
-    char path[SYSFS_PATH_MAX];
-    char link[SYSFS_PATH_MAX];
-    int ret = 0;
-
-    if ((netdir = opendir(SYSFS_CLASS_NET))) {
-        while ((de = readdir(netdir))) {
-            int cnt;
-            char *pos;
-            if (de->d_name[0] == '.')
-                continue;
-            snprintf(path, SYSFS_PATH_MAX, "%s/%s/wireless", SYSFS_CLASS_NET, de->d_name);
-            if (access(path, F_OK)) {
-                snprintf(path, SYSFS_PATH_MAX, "%s/%s/phy80211", SYSFS_CLASS_NET, de->d_name);
-                if (access(path, F_OK))
-                    continue;
-            }
-            /* found the wifi interface */
-            property_set("wlan.interface", de->d_name);
-            snprintf(path, SYSFS_PATH_MAX, "%s/%s/%s", SYSFS_CLASS_NET, de->d_name, SYS_MOD_NAME_DIR);
-            if ((cnt = readlink(path, link, SYSFS_PATH_MAX - 1)) < 0) {
-                ALOGW("can not find link of %s", path);
-                continue;
-            }
-            link[cnt] = '\0';
-            if ((pos = strrchr(link, '/'))) {
-                property_set(DRIVER_NAME_PROP, ++pos);
-                strncpy(buf, pos, PROPERTY_VALUE_MAX - 1);
-                buf[PROPERTY_VALUE_MAX - 1] = '\0';
-                ret = 1;
-                break;
-            }
-        }
-        closedir(netdir);
-    }
-
-    return ret;
-}
-#endif
-
 int is_wifi_driver_loaded() {
+    char driver_status[PROPERTY_VALUE_MAX];
 #ifdef WIFI_DRIVER_MODULE_PATH
-    char modname[PROPERTY_VALUE_MAX];
-    char line[PROPERTY_VALUE_MAX];
     FILE *proc;
-    int cnt = property_get(DRIVER_NAME_PROP, modname, NULL);
+    char line[sizeof(DRIVER_MODULE_TAG)+10];
+#endif
 
-    if (!cnt) {
-        if (get_driver_info(modname))
-            cnt = strlen(modname);
-        else if (property_get("wlan.interface", line, NULL))
-            return 1; // found an interface without modname, assume built-in
-        else
-            goto unloaded;
+    if (!property_get(DRIVER_PROP_NAME, driver_status, NULL)
+            || strcmp(driver_status, "ok") != 0) {
+        return 0;  /* driver not loaded */
     }
-    modname[cnt++] = ' ';
-
+#ifdef WIFI_DRIVER_MODULE_PATH
     /*
      * If the property says the driver is loaded, check to
      * make sure that the property setting isn't just left
@@ -312,18 +235,16 @@ int is_wifi_driver_loaded() {
      */
     if ((proc = fopen(MODULE_FILE, "r")) == NULL) {
         ALOGW("Could not open %s: %s", MODULE_FILE, strerror(errno));
-        goto unloaded;
+        property_set(DRIVER_PROP_NAME, "unloaded");
+        return 0;
     }
-
     while ((fgets(line, sizeof(line), proc)) != NULL) {
-        if (strncmp(line, modname, cnt) == 0) {
+        if (strncmp(line, DRIVER_MODULE_TAG, strlen(DRIVER_MODULE_TAG)) == 0) {
             fclose(proc);
-            return 1;
+//            return is_fst_driver_loaded();
         }
     }
     fclose(proc);
-
-unloaded:
     property_set(DRIVER_PROP_NAME, "unloaded");
     return 0;
 #else
@@ -335,23 +256,13 @@ int wifi_load_driver()
 {
 #ifdef WIFI_DRIVER_MODULE_PATH
     char driver_status[PROPERTY_VALUE_MAX];
-    char modname[PROPERTY_VALUE_MAX];
-    char modpath[SYSFS_PATH_MAX];
     int count = 100; /* wait at most 20 seconds for completion */
 
     if (is_wifi_driver_loaded()) {
         return 0;
     }
 
-    if (!property_get(DRIVER_PATH_PROP, modpath, NULL)) {
-        property_get(DRIVER_NAME_PROP, modname, NULL);
-        strcat(modname, ".ko");
-        if (!get_driver_path(modname, MODULE_DEFAULT_DIR, modpath))
-            strcpy(modpath, WIFI_DRIVER_MODULE_PATH);
-    }
-
-    ALOGI("got module path %s", modpath);
-    if (insmod(modpath, DRIVER_MODULE_ARG) < 0)
+    if (insmod(DRIVER_MODULE_PATH, DRIVER_MODULE_ARG) < 0)
         return -1;
 
     if (strcmp(FIRMWARE_LOADER,"") == 0) {
@@ -364,10 +275,10 @@ int wifi_load_driver()
     sched_yield();
     while (count-- > 0) {
         if (property_get(DRIVER_PROP_NAME, driver_status, NULL)) {
-            if (strcmp(driver_status, "ok") == 0) {
-                get_driver_info(modname);
-                return 0;
-            } else if (strcmp(driver_status, "failed") == 0) {
+            if (strcmp(driver_status, "ok") == 0)
+		  return 0;
+//                return wifi_fst_load_driver();
+            else if (strcmp(driver_status, "failed") == 0) {
                 wifi_unload_driver();
                 return -1;
             }
@@ -378,14 +289,14 @@ int wifi_load_driver()
     wifi_unload_driver();
     return -1;
 #else
-#ifdef WIFI_DRIVER_STATE_CTRL_PARAM
-    if (is_wifi_driver_loaded()) {
-        return 0;
-    }
-
-    if (wifi_change_driver_state(WIFI_DRIVER_STATE_ON) < 0)
-        return -1;
-#endif
+//#ifdef WIFI_DRIVER_STATE_CTRL_PARAM
+//    if (is_wifi_driver_loaded()) {
+//        return 0;
+//    }
+//
+//    if (wifi_change_driver_state(WIFI_DRIVER_STATE_ON) < 0)
+//        return -1;
+//#endif
     property_set(DRIVER_PROP_NAME, "ok");
     return 0;
 #endif
@@ -394,15 +305,11 @@ int wifi_load_driver()
 int wifi_unload_driver()
 {
     usleep(200000); /* allow to finish interface down */
-#ifdef WIFI_DRIVER_MODULE_PATH
-    char modname[PROPERTY_VALUE_MAX];
-    if (property_get("wlan.no-unload-driver", modname, NULL)
-            && strcmp(modname, "1") == 0)
-        return 0;
-    if (!property_get(DRIVER_NAME_PROP, modname, NULL))
-        return -1;
 
-    if (rmmod(modname) == 0) {
+//    wifi_fst_unload_driver();
+
+#ifdef WIFI_DRIVER_MODULE_PATH
+    if (rmmod(DRIVER_MODULE_NAME) == 0) {
         int count = 20; /* wait at most 10 seconds for completion */
         while (count-- > 0) {
             if (!is_wifi_driver_loaded())
@@ -413,15 +320,16 @@ int wifi_unload_driver()
         if (count) {
             return 0;
         }
-    }
-    return -1;
+        return -1;
+    } else
+        return -1;
 #else
-#ifdef WIFI_DRIVER_STATE_CTRL_PARAM
-    if (is_wifi_driver_loaded()) {
-        if (wifi_change_driver_state(WIFI_DRIVER_STATE_OFF) < 0)
-            return -1;
-    }
-#endif
+//#ifdef WIFI_DRIVER_STATE_CTRL_PARAM
+//    if (is_wifi_driver_loaded()) {
+//        if (wifi_change_driver_state(WIFI_DRIVER_STATE_OFF) < 0)
+//            return -1;
+//  }
+//#endif
     property_set(DRIVER_PROP_NAME, "unloaded");
     return 0;
 #endif
@@ -471,7 +379,7 @@ int ensure_entropy_file_exists()
     return 0;
 }
 
-int ensure_config_file_exists(const char *config_file)
+int ensure_config_file_exists(const char *config_file, const char *config_file_template)
 {
     char buf[2048];
     int srcfd, destfd;
@@ -492,9 +400,9 @@ int ensure_config_file_exists(const char *config_file)
         return -1;
     }
 
-    srcfd = TEMP_FAILURE_RETRY(open(SUPP_CONFIG_TEMPLATE, O_RDONLY));
+    srcfd = TEMP_FAILURE_RETRY(open(config_file_template, O_RDONLY));
     if (srcfd < 0) {
-        ALOGE("Cannot open \"%s\": %s", SUPP_CONFIG_TEMPLATE, strerror(errno));
+        ALOGE("Cannot open \"%s\": %s", config_file_template, strerror(errno));
         return -1;
     }
 
@@ -507,7 +415,7 @@ int ensure_config_file_exists(const char *config_file)
 
     while ((nread = TEMP_FAILURE_RETRY(read(srcfd, buf, sizeof(buf)))) != 0) {
         if (nread < 0) {
-            ALOGE("Error reading \"%s\": %s", SUPP_CONFIG_TEMPLATE, strerror(errno));
+            ALOGE("Error reading \"%s\": %s", config_file_template, strerror(errno));
             close(srcfd);
             close(destfd);
             unlink(config_file);
@@ -543,12 +451,16 @@ int wifi_start_supplicant(int p2p_supported)
     const prop_info *pi;
     unsigned serial = 0, i;
 
+//    if (wifi_start_fstman(0)) {
+//        return -1;
+//    }
+
     if (p2p_supported) {
         strcpy(supplicant_name, P2P_SUPPLICANT_NAME);
         strcpy(supplicant_prop_name, P2P_PROP_NAME);
 
         /* Ensure p2p config file is created */
-        if (ensure_config_file_exists(P2P_CONFIG_FILE) < 0) {
+        if (ensure_config_file_exists(P2P_CONFIG_FILE, SUPP_CONFIG_TEMPLATE) < 0) {
             ALOGE("Failed to create a p2p config file");
             return -1;
         }
@@ -565,7 +477,7 @@ int wifi_start_supplicant(int p2p_supported)
     }
 
     /* Before starting the daemon, make sure its config file exists */
-    if (ensure_config_file_exists(SUPP_CONFIG_FILE) < 0) {
+    if (ensure_config_file_exists(SUPP_CONFIG_FILE, SUPP_CONFIG_TEMPLATE) < 0) {
         ALOGE("Wi-Fi will not be enabled");
         return -1;
     }
@@ -591,7 +503,7 @@ int wifi_start_supplicant(int p2p_supported)
     if (pi != NULL) {
         serial = __system_property_serial(pi);
     }
-    property_get("wlan.interface", primary_iface, WIFI_TEST_INTERFACE);
+    property_get("wifi.interface", primary_iface, WIFI_TEST_INTERFACE);
 
     property_set("ctl.start", supplicant_name);
     sched_yield();
@@ -634,6 +546,7 @@ int wifi_stop_supplicant(int p2p_supported)
     /* Check whether supplicant already stopped */
     if (property_get(supplicant_prop_name, supp_status, NULL)
         && strcmp(supp_status, "stopped") == 0) {
+//        wifi_stop_fstman(0);
         return 0;
     }
 
@@ -642,12 +555,15 @@ int wifi_stop_supplicant(int p2p_supported)
 
     while (count-- > 0) {
         if (property_get(supplicant_prop_name, supp_status, NULL)) {
-            if (strcmp(supp_status, "stopped") == 0)
+            if (strcmp(supp_status, "stopped") == 0) {
+//                wifi_stop_fstman(0);
                 return 0;
+            }
         }
         usleep(100000);
     }
     ALOGE("Failed to stop supplicant");
+//    wifi_stop_fstman(0);
     return -1;
 }
 
